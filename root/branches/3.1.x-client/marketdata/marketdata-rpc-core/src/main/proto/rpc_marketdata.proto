syntax = "proto3";
import "rpc_base.proto";
import "rpc_paging.proto";
import "rpc_trading_types.proto";
option java_generic_services = true;
option java_package = "org.marketcetera.marketdata.core.rpc";
option java_outer_classname = "MarketDataRpc";

message MarketDataRequest {
    string sessionId = 1;
    string listenerId = 2;
    string request = 3;
}

message CancelRequest {
    string sessionId = 1;
    string listenerId = 2;
}

message CancelResponse {
}

message Event {
    string payload = 1;
}

message EventsResponse {
    string listenerId = 1;
    repeated string payload = 2;
}

message SnapshotRequest {
    string sessionId = 1;
    Instrument instrument = 2;
    ContentAndCapability content = 3;
    string provider = 4;
}

message SnapshotResponse {
    repeated string payload = 1;
}

message SnapshotPageRequest {
    string sessionId = 1;
    Instrument instrument = 2;
    ContentAndCapability content = 3;
    string provider = 4;
    PageRequest page = 5;
}

message SnapshotPageResponse {
    repeated string payload = 1;
}

enum ContentAndCapability {
    TOP_OF_BOOK = 0;
    OPEN_BOOK = 1;
    MARKET_STAT = 2;
    TOTAL_VIEW = 3;
    LEVEL_2 = 4;
    LATEST_TICK = 5;
    BBO10 = 6;
    NBBO = 7;
    DIVIDEND = 8;
    AGGREGATED_DEPTH = 9;
    UNAGGREGATED_DEPTH = 10;
    IMBALANCE = 11;
    UNKNOWN = 12;
    EVENT_BOUNDARY = 13;
}
message AvailableCapabilityRequest {
    string sessionId = 1;
}

message AvailableCapabilityResponse {
    repeated ContentAndCapability capability = 1;
}

service MarketDataRpcService {
    rpc login(LoginRequest) returns (LoginResponse);
    rpc logout(LogoutRequest) returns (LogoutResponse);
    rpc heartbeat(HeartbeatRequest) returns (stream HeartbeatResponse) {}
    rpc request(MarketDataRequest) returns (stream EventsResponse);
    rpc cancel(CancelRequest) returns (CancelResponse);
    rpc getSnapshot(SnapshotRequest) returns (SnapshotResponse);
    rpc getSnapshotPage(SnapshotPageRequest) returns (SnapshotPageResponse);
    rpc getAvailableCapability(AvailableCapabilityRequest) returns (AvailableCapabilityResponse);
}
